/*
Difficult Level (Questions 36â€“50)
These questions involve advanced window functions, partitions, cumulative sums, date operations, and real-world scenarios requiring intricate logic.
PARTITION BY Clause
LEAD() Function
LAG() Function
Cumulative Sum
Window Function with Aggregation
Date Filtering
Extract and Group By
DATEDIFF Function
DATE_TRUNC Function
Age Function
Date Conversion
Date Arithmetic
Current Date Usage
Weekend Orders
Next Day Delivery
*/


-- 36. Find the total revenue generated by each seller in each year.
SELECT s.seller_name, EXTRACT(YEAR FROM o.order_date) AS year, SUM(oi.quantity * oi.price_per_unit) AS total_revenue
FROM Sellers s
JOIN Orders o ON s.seller_id = o.seller_id
JOIN Order_items oi ON o.order_id = oi.order_id
GROUP BY s.seller_name, year;

-- 37. For each product, find the next higher-priced product in the same category.
SELECT p.product_name, c.category_name,
       LEAD(p.price) OVER (PARTITION BY c.category_name ORDER BY p.price) AS next_higher_price
FROM Products p
JOIN Category c ON p.category_id = c.category_id;

-- 38. LAG() Function: For each product, find the previous lower-priced product in the same category.
SELECT 
    p.product_name, 
    c.category_name, 
    p.price, 
    LAG(p.price) OVER (PARTITION BY c.category_name ORDER BY p.price) AS previous_lower_price
FROM Products p
JOIN Category c ON p.category_id = c.category_id;

-- 39. Cumulative Sum: Calculate the cumulative sum of sales for each seller.
SELECT 
    s.seller_name, 
    SUM(oi.quantity * oi.price_per_unit) AS total_sales, 
    SUM(SUM(oi.quantity * oi.price_per_unit)) OVER (PARTITION BY s.seller_id ORDER BY o.order_date) AS cumulative_sales
FROM Sellers s
JOIN Orders o ON s.seller_id = o.seller_id
JOIN Order_items oi ON o.order_id = oi.order_id
GROUP BY s.seller_name, s.seller_id, o.order_date;

-- 40. Window Function with Aggregation: Find the average order amount for each customer and compare it with their individual orders.
SELECT 
    c.customer_id, 
    CONCAT(c.f_name, ' ', c.l_name) AS customer_name, 
    o.order_id, 
    SUM(oi.quantity * oi.price_per_unit) AS order_total,
    AVG(SUM(oi.quantity * oi.price_per_unit)) OVER (PARTITION BY c.customer_id) AS average_order_amount
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
JOIN Order_items oi ON o.order_id = oi.order_id
GROUP BY c.customer_id, c.f_name, c.l_name, o.order_id;

-- 41. Date Filtering: List all orders placed in the current month. Include order ID, order date, and customer name.
SELECT 
    o.order_id, 
    o.order_date, 
    CONCAT(c.f_name, ' ', c.l_name) AS customer_name
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
WHERE EXTRACT(MONTH FROM o.order_date) = EXTRACT(MONTH FROM CURRENT_DATE)
  AND EXTRACT(YEAR FROM o.order_date) = EXTRACT(YEAR FROM CURRENT_DATE);

-- 42. Extract and Group By: Find the number of orders placed in each year.
SELECT 
    EXTRACT(YEAR FROM order_date) AS order_year, 
    COUNT(order_id) AS total_orders
FROM Orders
GROUP BY EXTRACT(YEAR FROM order_date);

-- 43. DATEDIFF Function: Calculate the average delivery time for all delivered orders.
SELECT 
    AVG(s.shipping_date - o.order_date) AS average_delivery_time_days
FROM Orders o
JOIN Shipping s ON o.order_id = s.order_id
WHERE s.delivery_status = 'Delivered';

-- 44. DATE_TRUNC Function: Find the total sales amount for each month in the current year.
SELECT 
    DATE_TRUNC('month', o.order_date) AS sales_month, 
    SUM(oi.quantity * oi.price_per_unit) AS total_sales
FROM Orders o
JOIN Order_items oi ON o.order_id = oi.order_id
WHERE EXTRACT(YEAR FROM o.order_date) = EXTRACT(YEAR FROM CURRENT_DATE)
GROUP BY DATE_TRUNC('month', o.order_date)
ORDER BY sales_month;

-- 45. Age Function: Find customers who have not placed any orders in the last 6 months.
SELECT 
    CONCAT(c.f_name, ' ', c.l_name) AS customer_name, 
    MAX(o.order_date) AS last_order_date
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.f_name, c.l_name
HAVING MAX(o.order_date) < CURRENT_DATE - INTERVAL '6 months';

-- 46. Date Conversion: Convert the order_date to a different format (e.g., 'YYYY-MM-DD') and display it with the order ID.
SELECT 
    order_id, 
    TO_CHAR(order_date, 'YYYY-MM-DD') AS formatted_order_date
FROM Orders;

-- 47. Date Arithmetic: Calculate the total number of days between the order date and shipping date for each order.
SELECT 
    o.order_id, 
    s.shipping_date - o.order_date AS days_between_order_and_shipping
FROM Orders o
JOIN Shipping s ON o.order_id = s.order_id;

-- 48. Current Date Usage: Find all orders that are overdue for payment. Assume payment is due within 30 days of the order date.
SELECT 
    o.order_id, 
    o.order_date, 
    CURRENT_DATE - o.order_date AS overdue_days
FROM Orders o
WHERE CURRENT_DATE > o.order_date + INTERVAL '30 days';

-- 49. Weekend Orders: Retrieve all orders that were placed on weekends.
SELECT 
    order_id, 
    order_date
FROM Orders
WHERE EXTRACT(DOW FROM order_date) IN (0, 6); -- 0 = Sunday, 6 = Saturday

-- 50. Next Day Delivery: List all orders that were delivered the next day after shipping.
SELECT 
    o.order_id, 
    s.shipping_date, 
    s.return_date
FROM Orders o
JOIN Shipping s ON o.order_id = s.order_id
WHERE s.return_date = s.shipping_date + INTERVAL '1 day';
