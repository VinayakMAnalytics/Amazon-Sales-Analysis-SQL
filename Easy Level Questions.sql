-- Amazon USA Sales Analysis SQL Problems and Solutions
/*
Easy Level (Questions 1â€“15)
These questions involve basic SELECT, JOINs, simple filtering, aggregation, and introductory GROUP BY clauses.
Basic Select
Simple Join
Conditional Select
Inner Join
Left Join
Right Join
Join with Filtering
Multi-table Join
Join with Subquery
Cross Join
Count Function
Sum and Group By
Average Function
Group By with Having
Group By Multiple Columns
*/

-- 1. Retrieve the names of all products in the products table.
SELECT product_name FROM Products;

-- 2. Find the full name of customers (first_name + last_name) and the names of the products they ordered.
SELECT CONCAT(c.f_name, ' ', c.l_name) AS customer_name, p.product_name
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
JOIN Order_items oi ON o.order_id = oi.order_id
JOIN Products p ON oi.product_id = p.product_id;

-- 3. List all products with a price greater than 100. Display the product name and price.
SELECT product_name, price
FROM Products
WHERE price > 100;

-- 4. List all orders along with customer names and product names.
SELECT o.order_id, CONCAT(c.f_name, ' ', c.l_name) AS customer_name, p.product_name
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
JOIN Order_items oi ON o.order_id = oi.order_id
JOIN Products p ON oi.product_id = p.product_id;

-- 5. Retrieve all customers and their corresponding orders. Include customers who haven't placed any orders.
SELECT c.customer_id, CONCAT(c.f_name, ' ', c.l_name) AS customer_name, o.order_id
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id;

-- 6. Retrieve all orders and their corresponding customers. Include orders without customer information.
SELECT o.order_id, CONCAT(c.f_name, ' ', c.l_name) AS customer_name
FROM Orders o
RIGHT JOIN Customers c ON o.customer_id = c.customer_id;

-- 7. List all products sold by sellers originating from 'USA.' Include product names and seller names.
SELECT p.product_name, s.seller_name
FROM Products p
JOIN Sellers s ON p.category_id = s.seller_id
WHERE s.origin = 'USA';

-- 8. Find the total amount paid for each order.
SELECT o.order_id, SUM(oi.quantity * oi.price_per_unit) AS total_paid
FROM Orders o
JOIN Order_items oi ON o.order_id = oi.order_id
GROUP BY o.order_id;

-- 9. List the customers who have ordered products in the 'electronics' category.
SELECT DISTINCT CONCAT(c.f_name, ' ', c.l_name) AS customer_name
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
JOIN Order_items oi ON o.order_id = oi.order_id
JOIN Products p ON oi.product_id = p.product_id
WHERE p.category_id = (SELECT category_id FROM Category WHERE category_name = 'electronics');

-- 10. List all combinations of category and sellers.
SELECT c.category_name, s.seller_name
FROM Category c
CROSS JOIN Sellers s;

-- 11. Count the total number of unique customers in the customers table.
SELECT COUNT(DISTINCT customer_id) AS total_customers
FROM Customers;

-- 12. Find the total revenue generated by each seller.
SELECT s.seller_name, SUM(oi.quantity * oi.price_per_unit) AS total_revenue
FROM Sellers s
JOIN Orders o ON s.seller_id = o.seller_id
JOIN Order_items oi ON o.order_id = oi.order_id
GROUP BY s.seller_name;

-- 13. Calculate the average price of products in the products table.
SELECT AVG(price) AS average_price
FROM Products;

-- 14. List all sellers who have sold more than 500 products. Display seller names and total products sold.
SELECT s.seller_name, SUM(oi.quantity) AS total_products_sold
FROM Sellers s
JOIN Orders o ON s.seller_id = o.seller_id
JOIN Order_items oi ON o.order_id = oi.order_id
GROUP BY s.seller_name
HAVING SUM(oi.quantity) > 500;

-- 15. Find the total revenue generated by each seller for each category.
SELECT s.seller_name, c.category_name, SUM(oi.quantity * oi.price_per_unit) AS total_revenue
FROM Sellers s
JOIN Orders o ON s.seller_id = o.seller_id
JOIN Order_items oi ON o.order_id = oi.order_id
JOIN Products p ON oi.product_id = p.product_id
JOIN Category c ON p.category_id = c.category_id
GROUP BY s.seller_name, c.category_name;